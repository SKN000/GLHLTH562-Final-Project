category_counts <- password_data %>%
group_by(type) %>%
summarise(count = n())
# 根据类型进行分组，并创建三个集合
only_letters <- nrow(password_data[password_data$type == "Only Letters", ])
only_numbers <- nrow(password_data[password_data$type == "Only Numbers", ])
letters_and_numbers <- nrow(password_data[password_data$type == "Letters and Numbers", ])
# 由于韦恩图需要集合间的交集，而这里的分类是互斥的，我们直接使用数量来构建简化的韦恩图
venn.plot <- venn.diagram(
x = list(
Letters = only_letters,
Numbers = only_numbers,
"Letters & Numbers" = letters_and_numbers
),
category.names = c("Only Letters", "Only Numbers", "Letters & Numbers"),
output = NULL,
fill = c("skyblue", "pink", "mediumorchid"),
alpha = 0.50,
label.col = "black",
cat.col = c("skyblue", "pink", "mediumorchid"),
cat.cex = 2
)
library(VennDiagram)
library(dplyr)
# 假设你的数据已经被读取到password_data变量中
password_data <- read.csv("data/passwords.csv")
# 添加一个新列，用于表示密码的类型
password_data$type <- ifelse(grepl("^[0-9]+$", password_data$password), "Only Numbers",
ifelse(grepl("^[A-Za-z]+$", password_data$password), "Only Letters",
"Letters and Numbers"))
# 统计每个类别的密码数量
category_counts <- password_data %>%
group_by(type) %>%
summarise(count = n())
# 根据类型进行分组，并创建三个集合
only_letters <- nrow(password_data[password_data$type == "Only Letters", ])
only_numbers <- nrow(password_data[password_data$type == "Only Numbers", ])
letters_and_numbers <- nrow(password_data[password_data$type == "Letters and Numbers", ])
# 由于韦恩图需要集合间的交集，而这里的分类是互斥的，我们直接使用数量来构建简化的韦恩图
venn.plot <- venn.diagram(
x = list(
Letters = only_letters,
Numbers = only_numbers,
"Letters & Numbers" = letters_and_numbers
),
category.names = c("Only Letters", "Only Numbers", "Letters & Numbers"),
fill = c("skyblue", "pink", "mediumorchid"),
alpha = 0.50,
label.col = "black",
cat.col = c("skyblue", "pink", "mediumorchid"),
cat.cex = 2,
output = NULL  # 这次我们不设置filename参数
)
library(VennDiagram)
library(dplyr)
# 假设你的数据已经被读取到password_data变量中
password_data <- read.csv("data/passwords.csv")
# 添加一个新列，用于表示密码的类型
password_data$type <- ifelse(grepl("^[0-9]+$", password_data$password), "Only Numbers",
ifelse(grepl("^[A-Za-z]+$", password_data$password), "Only Letters",
"Letters and Numbers"))
# 统计每个类别的密码数量
category_counts <- password_data %>%
group_by(type) %>%
summarise(count = n())
# 根据类型进行分组，并创建三个集合
only_letters <- nrow(password_data[password_data$type == "Only Letters", ])
only_numbers <- nrow(password_data[password_data$type == "Only Numbers", ])
letters_and_numbers <- nrow(password_data[password_data$type == "Letters and Numbers", ])
# 由于韦恩图需要集合间的交集，而这里的分类是互斥的，我们直接使用数量来构建简化的韦恩图
venn.plot <- venn.diagram(
x = list(
Letters = only_letters,
Numbers = only_numbers,
"Letters & Numbers" = letters_and_numbers
),
category.names = c("Only Letters", "Only Numbers", "Letters & Numbers"),
fill = c("skyblue", "pink", "mediumorchid"),
alpha = 0.50,
label.col = "black",
cat.col = c("skyblue", "pink", "mediumorchid"),
cat.cex = 2,
filename = "./figures/pre3.png"  # 替换为你想要保存文件的路径和文件名
)
# 显示韦恩图
grid.draw(venn.plot)
only_letters
only_numbers
letters_and_numbers
# 加载VennDiagram包
library(VennDiagram)
# 指定集合的元素数量
category_counts <- list(
Letters = 446 + 14,  # Letters集合总数，包括仅Letters和重叠部分
Numbers = 40 + 14    # Numbers集合总数，包括仅Numbers和重叠部分
)
# 指定重叠部分元素数量
overlap_counts <- list(
c("Letters", "Numbers") = 14  # Letters和Numbers的重叠部分
# 加载VennDiagram包
library(VennDiagram)
# 绘制韦恩图
venn.plot <- venn.diagram(
x = list(
Letters = 446 + 14,  # Letters集合总数，包括仅Letters和重叠部分
Numbers = 40 + 14    # Numbers集合总数，包括仅Numbers和重叠部分
),
category.names = c("Letters", "Numbers"),
filename = NULL,  # 在RStudio的Viewer中直接显示
output = TRUE,    # 输出图形
fill = c("skyblue", "salmon"),
alpha = 0.5,
label.col = "black",
cat.col = c("skyblue", "salmon"),
cat.cex = 1.5,
cat.fontface = "bold",
euler.d = TRUE,  # 使用Euler图来更准确地表示实际的集合数量
scaled = FALSE   # 不按比例缩放圆圈的大小
)
# 显示韦恩图
grid.draw(venn.plot)
# 加载VennDiagram包
library(VennDiagram)
# 绘制韦恩图
venn.plot <- venn.diagram(
x = list(
Letters = 446 + 14,  # Letters集合总数，包括仅Letters和重叠部分
Numbers = 40 + 14    # Numbers集合总数，包括仅Numbers和重叠部分
),
category.names = c("Letters", "Numbers"),
filename = NULL,  # 在RStudio的Viewer中直接显示
output = TRUE,    # 输出图形
fill = c("skyblue", "salmon"),
alpha = 0.5,
label.col = "black",
cat.col = c("skyblue", "salmon"),
cat.cex = 1.5,
cat.fontface = "bold",
euler.d = TRUE,  # 使用Euler图来更准确地表示实际的集合数量
scaled = FALSE   # 不按比例缩放圆圈的大小
)
# 显示韦恩图
grid.draw(venn.plot)
# 加载VennDiagram包
library(VennDiagram)
# 绘制韦恩图
venn.plot <- venn.diagram(
x = list(
Letters = 446 + 14,  # Letters集合总数，包括仅Letters和重叠部分
Numbers = 40 + 14    # Numbers集合总数，包括仅Numbers和重叠部分
),
category.names = c("Letters", "Numbers"),
filename = NULL,  # 在RStudio的Viewer中直接显示
output = TRUE,    # 输出图形
fill = c("skyblue", "salmon"),
alpha = 0.5,
label.col = "black",
cat.col = c("skyblue", "salmon"),
cat.cex = 1.5,
cat.fontface = "bold",
euler.d = TRUE,  # 使用Euler图来更准确地表示实际的集合数量
scaled = FALSE,   # 不按比例缩放圆圈的大小
filename = "./figures/pre3.png"
)
# 加载VennDiagram包
library(VennDiagram)
# 绘制韦恩图
venn.plot <- venn.diagram(
x = list(
Letters = 446 + 14,  # Letters集合总数，包括仅Letters和重叠部分
Numbers = 40 + 14    # Numbers集合总数，包括仅Numbers和重叠部分
),
category.names = c("Letters", "Numbers"),
output = TRUE,    # 输出图形
fill = c("skyblue", "salmon"),
alpha = 0.5,
label.col = "black",
cat.col = c("skyblue", "salmon"),
cat.cex = 1.5,
cat.fontface = "bold",
euler.d = TRUE,  # 使用Euler图来更准确地表示实际的集合数量
scaled = FALSE,   # 不按比例缩放圆圈的大小
filename = "./figures/pre3.png"
)
# 显示韦恩图
grid.draw(venn.plot)
paste(rep("word_" , 200) , sample(c(1:1000) , 200 , replace=F) , sep="")
# 加载VennDiagram包
library(VennDiagram)
# 指定集合的元素数量和交集
set1 <- 446  # Letters 独有的元素数量
set2 <- 40   # Numbers 独有的元素数量
intersection <- 14  # Letters 和 Numbers 的交集数量
# 使用VennDiagram包绘制韦恩图
venn.plot <- venn.diagram(
x = list(
Letters = set1 + intersection,  # Letters 集合总数
Numbers = set2 + intersection   # Numbers 集合总数
),
category.names = c("Letters", "Numbers"),
filename = 'pre.png',
output=TRUE,
height = 480,
width = 480,
resolution = 300,
compression = "lzw",
fill = c("skyblue", "salmon"),
alpha = 0.5,
cex = 1.5,
fontface = "bold",
fontfamily = "sans",
cat.cex = 0.6,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.dist = c(0.03, 0.03),
cat.pos = 180,
euler.d = TRUE
)
# 显示韦恩图
grid.draw(venn.plot)
# 加载VennDiagram包
library(VennDiagram)
# 准备颜色
myCol <- c("skyblue", "salmon")
# 绘制韦恩图
venn.plot <- venn.diagram(
x = list(
Letters = 446 + 14,  # Letters独有与交集的总数
Numbers = 40 + 14    # Numbers独有与交集的总数
),
category.names = c("Letters", "Numbers"),
filename = NULL,  # 在RStudio的Viewer中直接显示
output = TRUE,    # 输出图形
fill = myCol,
alpha = 0.5,
cex = 1.5,
fontface = "bold",
fontfamily = "sans",
cat.cex = 0.6,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.pos = c(-20, 20),
cat.dist = c(0.05, 0.05),
cat.fontfamily = "sans",
rotation.degree = 0,
euler.d = TRUE,  # 使用真实比例的欧拉图
scaled = FALSE   # 不按比例缩放圆圈的大小
)
# 显示韦恩图
grid.draw(venn.plot)
# 加载VennDiagram包
library(VennDiagram)
# 准备颜色
myCol <- c("skyblue", "salmon")
# 绘制韦恩图
venn.plot <- venn.diagram(
x = list(
Letters = 446 + 14,  # Letters独有与交集的总数
Numbers = 40 + 14    # Numbers独有与交集的总数
),
category.names = c("Letters", "Numbers"),
filename = 'pre.png',  # 在RStudio的Viewer中直接显示
output = TRUE,    # 输出图形
fill = myCol,
alpha = 0.5,
cex = 1.5,
fontface = "bold",
fontfamily = "sans",
cat.cex = 0.6,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.pos = c(-20, 20),
cat.dist = c(0.05, 0.05),
cat.fontfamily = "sans",
rotation.degree = 0,
euler.d = TRUE,  # 使用真实比例的欧拉图
scaled = FALSE   # 不按比例缩放圆圈的大小
)
# 显示韦恩图
grid.draw(venn.plot)
# 加载VennDiagram包
library(VennDiagram)
# 生成Letters集合，共460个元素，其中446个是独有的，14个是与Numbers的交集
set.Letters <- paste("word_", sample(1:1000, 446, replace=FALSE), sep="")
# 生成Numbers集合，共54个元素，其中40个是独有的，14个是与Letters的交集
set.Numbers <- paste("word_", sample(1:1000, 40, replace=FALSE), sep="")
# 生成交集元素
intersection <- paste("word_", sample(1001:2000, 14, replace=FALSE), sep="")
# 合并集合与交集
set.Letters <- union(set.Letters, intersection)
set.Numbers <- union(set.Numbers, intersection)
# 准备颜色
myCol <- c("skyblue", "salmon")
# 绘制韦恩图
venn.plot <- venn.diagram(
x = list(
Letters = set.Letters,
Numbers = set.Numbers
),
category.names = c("Letters", "Numbers"),
filename = 'pre3.png',  # 在RStudio的Viewer中直接显示
output = TRUE,    # 输出图形
fill = myCol,
alpha = 0.5,
cex = 1.5,
fontface = "bold",
fontfamily = "sans",
cat.cex = 0.6,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.pos = c(-20, 20),
cat.dist = c(0.05, 0.05),
cat.fontfamily = "sans",
rotation.degree = 0
)
# 显示韦恩图
# 加载VennDiagram包
library(VennDiagram)
# 生成Letters集合，共460个元素，其中446个是独有的，14个是与Numbers的交集
set.Letters <- paste("word_", sample(1:1000, 446, replace=FALSE), sep="")
# 生成Numbers集合，共54个元素，其中40个是独有的，14个是与Letters的交集
set.Numbers <- paste("word_", sample(1:1000, 40, replace=FALSE), sep="")
# 生成交集元素
intersection <- paste("word_", sample(1001:2000, 14, replace=FALSE), sep="")
# 合并集合与交集
set.Letters <- union(set.Letters, intersection)
set.Numbers <- union(set.Numbers, intersection)
# 准备颜色
myCol <- c("skyblue", "salmon")
# 绘制韦恩图
venn.plot <- venn.diagram(
x = list(
Letters = set.Letters,
Numbers = set.Numbers
),
category.names = c("Letters Only", "Numbers Only"),
filename = 'pre3.png',  # 在RStudio的Viewer中直接显示
output = TRUE,    # 输出图形
fill = myCol,
alpha = 0.5,
cex = 1.5,
fontface = "bold",
fontfamily = "sans",
cat.cex = 0.6,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.pos = c(-20, 20),
cat.dist = c(0.05, 0.05),
cat.fontfamily = "sans",
rotation.degree = 0
)
# 显示韦恩图
# 加载ggplot2包
library(ggplot2)
# 绘制散点图，展示rank与strength之间的关系
ggplot(password_data, aes(x=rank, y=strength)) +
geom_point(aes(color=strength), alpha=0.6) +  # 使用strength值来给点着色，透明度设置为0.6增加视觉效果
geom_smooth(method="loess", se=FALSE, color="blue", size=1) +  # 添加LOESS平滑曲线，不显示置信区间
scale_color_gradient(low="red", high="green") +  # 用颜色渐变表示strength，红色表示低安全性，绿色表示高安全性
labs(title="Password Rank vs. Strength",
subtitle="Most commonly used passwords do not score high on security",
x="Rank (Popularity)",
y="Strength") +
theme_minimal() +  # 使用简洁的主题
theme(plot.title = element_text(hjust = 0.5),  # 标题居中
plot.subtitle = element_text(hjust = 0.5))  # 副标题居中
# 加载ggplot2包
library(ggplot2)
# 绘制散点图，展示rank与strength之间的关系
ggplot(password_data, aes(x=rank, y=strength)) +
geom_point(aes(color=strength), alpha=0.6) +  # 使用strength值来给点着色，透明度设置为0.6增加视觉效果
geom_smooth(method="loess", se=FALSE, color="blue", size=1) +  # 添加LOESS平滑曲线，不显示置信区间
scale_color_gradient(low="red", high="green") +  # 用颜色渐变表示strength，红色表示低安全性，绿色表示高安全性
labs(title="Password Rank vs. Strength",
x="Rank (Popularity)",
y="Strength") +
theme_minimal() +  # 使用简洁的主题
theme(plot.title = element_text(hjust = 0.5),  # 标题居中
plot.subtitle = element_text(hjust = 0.5))  # 副标题居中
# 加载必要的包
library(ggplot2)
library(dplyr)
library(stringr)
# 假设你的数据框名为password_data
# password_data <- read.csv("path_to_your_data.csv")
# 计算密码长度和构成
password_data <- password_data %>%
mutate(length = nchar(password),  # 计算密码长度
composition = case_when(
str_detect(password, "^[A-Za-z]+$") ~ "Only Letters",
str_detect(password, "^[0-9]+$") ~ "Only Numbers",
TRUE ~ "Letters and Numbers"
))
# 假设所有密码的强度都需要被估计，我们用随机数模拟（仅为展示目的）
set.seed(123)  # 为了可重复性
password_data$strength <- runif(nrow(password_data), min = 1, max = 10)
# 绘制图形
ggplot(password_data, aes(x=length, y=strength)) +
geom_jitter(aes(color=composition), width = 0.3, alpha=0.6) +  # 使用抖动图来减少点重叠
facet_wrap(~category, scales = "free_x") +  # 基于密码种类进行分面
scale_color_manual(values=c("Only Letters"="blue", "Only Numbers"="red", "Letters and Numbers"="green")) +
labs(title="Impact of Password Length and Composition on Strength",
x="Password Length",
y="Password Strength",
color="Composition") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# 加载必要的包
library(ggplot2)
library(dplyr)
library(stringr)
# 假设已经有password_data数据框，并且包含password和category两列
# 这里模拟添加strength列，仅供示例
set.seed(123) # 确保结果可重复
password_data$strength <- runif(nrow(password_data), 1, 10) # 随机生成强度值
# 从密码中提取长度、字母数量和数字数量
password_data <- password_data %>%
mutate(length = nchar(password),
letters_count = str_count(password, "[A-Za-z]"),
numbers_count = str_count(password, "[0-9]"))
# 使用lm()函数进行线性回归，模型中包括category, length, letters_count, numbers_count
model <- lm(strength ~ category + length + letters_count + numbers_count, data=password_data)
summary(model) # 显示模型摘要
# 计算模型残差
password_data$residuals <- residuals(model)
# 绘制残差图
ggplot(password_data, aes(x=strength, y=residuals)) +
geom_hline(yintercept=0, linetype="dashed", color="red") +
geom_point(alpha=0.5) +
labs(title="Model Residuals",
x="Actual Strength",
y="Residuals") +
theme_minimal()
library(dplyr)
library(ggplot2)
library(stringr)
# 从password中提取长度、字母数量和数字数量
password_data <- password_data %>%
mutate(length = nchar(password),
letters_count = str_count(password, "[A-Za-z]"),
numbers_count = str_count(password, "[0-9]"),
category = case_when(
str_detect(password, "^[A-Za-z]+$") ~ "Only Letters",
str_detect(password, "^[0-9]+$") ~ "Only Numbers",
TRUE ~ "Letters and Numbers"
))
# 使用lm()进行线性回归分析
model <- lm(strength ~ category + length + letters_count + numbers_count, data=password_data)
summary(model) # 查看模型摘要
# 计算模型预测值和残差
password_data$predicted_strength <- predict(model)
password_data$residuals <- password_data$strength - password_data$predicted_strength
# 绘制残差图
ggplot(password_data, aes(x=predicted_strength, y=residuals)) +
geom_hline(yintercept=0, linetype="dashed", color="red") +
geom_point(alpha=0.5) +
labs(title="Residuals vs. Predicted Strength",
x="Predicted Strength",
y="Residuals (Actual - Predicted)") +
theme_minimal()
library(dplyr)
library(ggplot2)
library(stringr)
# 从password中提取长度、字母数量和数字数量
password_data <- password_data %>%
mutate(length = nchar(password),
letters_count = str_count(password, "[A-Za-z]"),
numbers_count = str_count(password, "[0-9]"),
category = case_when(
str_detect(password, "^[A-Za-z]+$") ~ "Only Letters",
str_detect(password, "^[0-9]+$") ~ "Only Numbers",
TRUE ~ "Letters and Numbers"
))
# 使用lm()进行线性回归分析
model <- lm(strength ~ category + length + letters_count + numbers_count, data=password_data)
summary(model) # 查看模型摘要
# 计算模型预测值和残差
password_data$predicted_strength <- predict(model)
password_data$residuals <- password_data$strength - password_data$predicted_strength
# 绘制残差图
ggplot(password_data, aes(x=predicted_strength, y=residuals)) +
geom_hline(yintercept=0, linetype="dashed", color="red") +
geom_point(alpha=0.5) +
labs(x="Strength",
y="Error") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
options(scipen=999) # turns off scientific notation
# load packages
library(tidyverse)
library(tidytuesdayR)   # install.packages("tidytuesdayR") to get new data
library(zoo)
# load data
colony <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/colony.csv')
stressor <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/stressor.csv')
# clean data (optional: tidy tuesday provides clean data)
library(wordcloud2)
library(htmlwidgets)
words <- password_data$password
# freqs <- password_data$font_size
freqs <- 501 - password_data$rank
freqs <- sqrt(freqs)
freqs <- round(freqs / max(freqs) * 500)
freqs[1] <- freqs[1]+1000
word_freq <- data.frame(word=words, freq=freqs)
wordcloud <- wordcloud2(word_freq, size = 0.5, shape = "circle")
saveWidget(wordcloud, file="wordcloud.html")
print(wordcloud)
library(dataReporter)
makeCodebook(data = password_data, output_dir = getwd(), report_title = "Data Report", open_report = FALSE, replace = TRUE)
library(dataReporter)
makeCodebook(data = password_data, output_dir = getwd(), report_title = "Data Report", open_report = FALSE, replace = TRUE)
